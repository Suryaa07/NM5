{"ast":null,"code":"import _defineProperty from \"/Users/vishal/SocialEase/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/Users/vishal/SocialEase/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _options$theme = options.theme,\n    defaultTheme = _options$theme === void 0 ? {} : _options$theme,\n    _options$attribute = options.attribute,\n    defaultAttribute = _options$attribute === void 0 ? DEFAULT_ATTRIBUTE : _options$attribute,\n    _options$modeStorageK = options.modeStorageKey,\n    defaultModeStorageKey = _options$modeStorageK === void 0 ? DEFAULT_MODE_STORAGE_KEY : _options$modeStorageK,\n    _options$colorSchemeS = options.colorSchemeStorageKey,\n    defaultColorSchemeStorageKey = _options$colorSchemeS === void 0 ? DEFAULT_COLOR_SCHEME_STORAGE_KEY : _options$colorSchemeS,\n    _options$defaultMode = options.defaultMode,\n    designSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n    designSystemColorScheme = options.defaultColorScheme,\n    _options$disableTrans = options.disableTransitionOnChange,\n    designSystemTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n    designSystemShouldSkipGeneratingVar = options.shouldSkipGeneratingVar,\n    resolveTheme = options.resolveTheme,\n    excludeVariablesFromRoot = options.excludeVariablesFromRoot;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n      _ref$theme = _ref.theme,\n      themeProp = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n      _ref$modeStorageKey = _ref.modeStorageKey,\n      modeStorageKey = _ref$modeStorageKey === void 0 ? defaultModeStorageKey : _ref$modeStorageKey,\n      _ref$colorSchemeStora = _ref.colorSchemeStorageKey,\n      colorSchemeStorageKey = _ref$colorSchemeStora === void 0 ? defaultColorSchemeStorageKey : _ref$colorSchemeStora,\n      _ref$attribute = _ref.attribute,\n      attribute = _ref$attribute === void 0 ? defaultAttribute : _ref$attribute,\n      _ref$defaultMode = _ref.defaultMode,\n      defaultMode = _ref$defaultMode === void 0 ? designSystemMode : _ref$defaultMode,\n      _ref$defaultColorSche = _ref.defaultColorScheme,\n      defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche,\n      _ref$disableTransitio = _ref.disableTransitionOnChange,\n      disableTransitionOnChange = _ref$disableTransitio === void 0 ? designSystemTransitionOnChange : _ref$disableTransitio,\n      _ref$storageWindow = _ref.storageWindow,\n      storageWindow = _ref$storageWindow === void 0 ? typeof window === 'undefined' ? undefined : window : _ref$storageWindow,\n      _ref$documentNode = _ref.documentNode,\n      documentNode = _ref$documentNode === void 0 ? typeof document === 'undefined' ? undefined : document : _ref$documentNode,\n      _ref$colorSchemeNode = _ref.colorSchemeNode,\n      colorSchemeNode = _ref$colorSchemeNode === void 0 ? typeof document === 'undefined' ? undefined : document.documentElement : _ref$colorSchemeNode,\n      _ref$colorSchemeSelec = _ref.colorSchemeSelector,\n      colorSchemeSelector = _ref$colorSchemeSelec === void 0 ? ':root' : _ref$colorSchemeSelec,\n      _ref$shouldSkipGenera = _ref.shouldSkipGeneratingVar,\n      shouldSkipGeneratingVar = _ref$shouldSkipGenera === void 0 ? designSystemShouldSkipGeneratingVar : _ref$shouldSkipGenera;\n    var hasMounted = React.useRef(false);\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n      colorSchemes = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n      _themeProp$components = themeProp.components,\n      components = _themeProp$components === void 0 ? {} : _themeProp$components,\n      cssVarPrefix = themeProp.cssVarPrefix,\n      restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n        supportedColorSchemes: allColorSchemes,\n        defaultLightColorScheme: defaultLightColorScheme,\n        defaultDarkColorScheme: defaultDarkColorScheme,\n        modeStorageKey: modeStorageKey,\n        colorSchemeStorageKey: colorSchemeStorageKey,\n        defaultMode: defaultMode,\n        storageWindow: storageWindow\n      }),\n      mode = _useCurrentColorSchem.mode,\n      setMode = _useCurrentColorSchem.setMode,\n      systemMode = _useCurrentColorSchem.systemMode,\n      lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n      darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n      colorScheme = _useCurrentColorSchem.colorScheme,\n      setColorScheme = _useCurrentColorSchem.setColorScheme;\n    var calculatedMode = function () {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n        return defaultMode;\n      }\n      return mode;\n    }();\n    var calculatedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    }(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n    var _cssVarsParser = cssVarsParser(restThemeProp, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n      rootCss = _cssVarsParser.css,\n      rootVars = _cssVarsParser.vars,\n      parsedTheme = _cssVarsParser.parsedTheme; // 3. Start composing the theme object\n\n    var theme = _extends({}, parsedTheme, {\n      components: components,\n      colorSchemes: colorSchemes,\n      cssVarPrefix: cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: function getColorSchemeSelector(targetColorScheme) {\n        return \"[\".concat(attribute, \"=\\\"\").concat(targetColorScheme, \"\\\"] &\");\n      }\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n    var defaultColorSchemeStyleSheet = {};\n    var otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        key = _ref3[0],\n        scheme = _ref3[1];\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n          prefix: cssVarPrefix,\n          shouldSkipGeneratingVar: shouldSkipGeneratingVar\n        }),\n        css = _cssVarsParser2.css,\n        vars = _cssVarsParser2.vars,\n        parsedScheme = _cssVarsParser2.parsedTheme;\n      theme.vars = deepmerge(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      }();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          var excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(function (cssVar) {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[\"\".concat(colorSchemeSelector, \", [\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      } else {\n        otherColorSchemesStyleSheet[\"\".concat(colorSchemeSelector === ':root' ? '' : colorSchemeSelector, \"[\").concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(function () {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(function () {\n      var timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        var css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(documentNode.body);\n        })();\n        timer = setTimeout(function () {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        systemMode: systemMode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: _defineProperty({}, colorSchemeSelector, rootCss)\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  var defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  var defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  var getInitColorSchemeScript = function getInitColorSchemeScript(params) {\n    return systemGetInitColorSchemeScript(_extends({\n      attribute: defaultAttribute,\n      colorSchemeStorageKey: defaultColorSchemeStorageKey,\n      defaultMode: designSystemMode,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: defaultModeStorageKey\n    }, params));\n  };\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","React","PropTypes","deepmerge","GlobalStyles","cssVarsParser","ThemeProvider","systemGetInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_COLOR_SCHEME_STORAGE_KEY","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_options$theme","theme","defaultTheme","_options$attribute","attribute","defaultAttribute","_options$modeStorageK","modeStorageKey","defaultModeStorageKey","_options$colorSchemeS","colorSchemeStorageKey","defaultColorSchemeStorageKey","_options$defaultMode","defaultMode","designSystemMode","designSystemColorScheme","defaultColorScheme","_options$disableTrans","disableTransitionOnChange","designSystemTransitionOnChange","designSystemShouldSkipGeneratingVar","shouldSkipGeneratingVar","resolveTheme","excludeVariablesFromRoot","colorSchemes","light","dark","console","error","concat","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","_ref","children","_ref$theme","themeProp","_ref$modeStorageKey","_ref$colorSchemeStora","_ref$attribute","_ref$defaultMode","_ref$defaultColorSche","_ref$disableTransitio","_ref$storageWindow","storageWindow","window","_ref$documentNode","documentNode","document","_ref$colorSchemeNode","colorSchemeNode","documentElement","_ref$colorSchemeSelec","colorSchemeSelector","_ref$shouldSkipGenera","hasMounted","useRef","_themeProp$colorSchem","_themeProp$components","components","cssVarPrefix","restThemeProp","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","_useCurrentColorSchem","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","calculatedMode","calculatedColorScheme","_cssVarsParser","prefix","rootCss","css","rootVars","vars","parsedTheme","getColorSchemeSelector","targetColorScheme","defaultColorSchemeStyleSheet","otherColorSchemesStyleSheet","entries","forEach","_ref2","_ref3","_slicedToArray","key","scheme","_cssVarsParser2","parsedScheme","palette","resolvedDefaultColorScheme","excludedVariables","cssVar","useEffect","setAttribute","timer","current","createElement","appendChild","createTextNode","head","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","_defineProperty","propTypes","string","node","any","oneOfType","object","bool","func","getInitColorSchemeScript","params"],"sources":["/Users/vishal/SocialEase/client/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\", \"components\", \"cssVarPrefix\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { deepmerge } from '@mui/utils';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport systemGetInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_COLOR_SCHEME_STORAGE_KEY, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  const {\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    shouldSkipGeneratingVar: designSystemShouldSkipGeneratingVar,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = defaultTheme,\n    modeStorageKey = defaultModeStorageKey,\n    colorSchemeStorageKey = defaultColorSchemeStorageKey,\n    attribute = defaultAttribute,\n    defaultMode = designSystemMode,\n    defaultColorScheme = designSystemColorScheme,\n    disableTransitionOnChange = designSystemTransitionOnChange,\n    storageWindow = typeof window === 'undefined' ? undefined : window,\n    documentNode = typeof document === 'undefined' ? undefined : document,\n    colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n    colorSchemeSelector = ':root',\n    shouldSkipGeneratingVar = designSystemShouldSkipGeneratingVar\n  }) {\n    const hasMounted = React.useRef(false);\n\n    const {\n      colorSchemes = {},\n      components = {},\n      cssVarPrefix\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded);\n\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark; // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n\n    const calculatedMode = (() => {\n      if (!mode) {\n        // This scope occurs on the server\n        if (defaultMode === 'system') {\n          return designSystemMode;\n        }\n\n        return defaultMode;\n      }\n\n      return mode;\n    })();\n\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'system'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })(); // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n\n\n    const {\n      css: rootCss,\n      vars: rootVars,\n      parsedTheme\n    } = cssVarsParser(restThemeProp, {\n      prefix: cssVarPrefix,\n      shouldSkipGeneratingVar\n    }); // 3. Start composing the theme object\n\n    let theme = _extends({}, parsedTheme, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    }); // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n\n\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars,\n        parsedTheme: parsedScheme\n      } = cssVarsParser(scheme, {\n        prefix: cssVarPrefix,\n        shouldSkipGeneratingVar\n      });\n      theme.vars = deepmerge(theme.vars, vars);\n\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        theme = _extends({}, theme, parsedScheme);\n\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    }); // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]); // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(documentNode.body))();\n\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        systemMode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          [colorSchemeSelector]: rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: defaultColorSchemeStyleSheet\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: otherColorSchemesStyleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: PropTypes.any,\n\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: PropTypes.string,\n\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: PropTypes.string,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * Disable CSS transitions when switching between modes or color schemes\n     */\n    disableTransitionOnChange: PropTypes.bool,\n\n    /**\n     * The document to attach the attribute to\n     */\n    documentNode: PropTypes.any,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * A function to determine if the key, value should be attached as CSS Variable\n     */\n    shouldSkipGeneratingVar: PropTypes.func,\n\n    /**\n     * The window that attaches the 'storage' event listener\n     * @default window\n     */\n    storageWindow: PropTypes.any,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n\n  const getInitColorSchemeScript = params => systemGetInitColorSchemeScript(_extends({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}